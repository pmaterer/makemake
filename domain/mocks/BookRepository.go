// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/pmaterer/makemake/domain"
	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: b
func (_m *BookRepository) AddBook(b domain.Book) error {
	ret := _m.Called(b)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Book) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBook provides a mock function with given fields: id
func (_m *BookRepository) DeleteBook(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBooks provides a mock function with given fields:
func (_m *BookRepository) GetAllBooks() ([]domain.Book, error) {
	ret := _m.Called()

	var r0 []domain.Book
	if rf, ok := ret.Get(0).(func() []domain.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: id
func (_m *BookRepository) GetBook(id int) (domain.Book, error) {
	ret := _m.Called(id)

	var r0 domain.Book
	if rf, ok := ret.Get(0).(func(int) domain.Book); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: b
func (_m *BookRepository) UpdateBook(b domain.Book) error {
	ret := _m.Called(b)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Book) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
